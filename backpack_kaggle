
import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)
import seaborn as sns # seaborn library for data visualisation


import os
for dirname, _, filenames in os.walk('/kaggle/input'):
    for filename in filenames:
        print(os.path.join(dirname, filename))



import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, BatchNormalization, Activation, Dropout, Input
from tensorflow.keras.regularizers import l2
from tensorflow.keras.metrics import RootMeanSquaredError
from tensorflow.keras.utils import plot_model



import os 
os.listdir('/kaggle/input/playground-series-s5e2')
from sklearn.preprocessing import LabelEncoder, OneHotEncoder
import pandas as pd 
import matplotlib.pyplot as plt
import seaborn as sns
import missingno as msno
from sklearn.model_selection import train_test_split

from xgboost import XGBRegressor, plot_importance
import warnings
warnings.filterwarnings("ignore")




df_train_data=pd.read_csv('/kaggle/input/playground-series-s5e2/train.csv')

df_train_extra_data=pd.read_csv('/kaggle/input/playground-series-s5e2/training_extra.csv')
df_test=pd.read_csv('/kaggle/input/playground-series-s5e2/test.csv')




df_train=pd.concat([df_train_data,df_train_extra_data],axis=0)

df_train.shape


df_train.isnull().sum()




df_train=df_train.ffill()


df_train.isnull().sum()


df_test=df_test.ffill()


df_test.isnull().sum()


y = df_train['Price']
X = df_train.drop('Price',axis=1)
X_test = df_test.copy()


X_train, X_valid, y_train, y_valid = train_test_split(X,y, test_size = 0.2 , random_state = 42, shuffle = True)


object_columns = df_train.select_dtypes(include=['object']).columns.tolist()
print("Object columns:", object_columns)


from sklearn.model_selection import train_test_split, KFold
from sklearn.metrics import mean_squared_error
from catboost import CatBoostRegressor


model = CatBoostRegressor(iterations = 2000,
                          cat_features = object_columns,
                          learning_rate = 0.1)
model.fit(X_train, y_train, eval_set = [(X_valid, y_valid)], early_stopping_rounds = 75)






y_pred = model.predict(X_test)
y_pred

submission=pd.DataFrame(y_pred)


submission_df=pd.concat([df_test['id'],submission],axis=1)

submission_df.columns=['id','Price']

SCORE=
submission_df.head()


submission_df.to_csv('submission.csv', index=False)

